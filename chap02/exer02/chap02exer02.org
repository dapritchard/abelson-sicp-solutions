#+TITLE: SICP Exercise 2.2
#+SETUPFILE: ../../export-setup/main-settings.org
#+PROPERTY: header-args :tangle chap02exer02.scm

* Exercise 2.2
:PROPERTIES:
:CUSTOM_ID: exercise
:END:

Consider the problem of representing line segments in a plane.  Each segment is
represented as a pair of points: a starting point and an ending point.  Define a
constructor src_scheme[:exports code]{make-segment} and selectors
src_scheme[:exports code]{start-segment} and src_scheme[:exports
code]{end-segment} that define the representation of segments in terms of
points.  Furthermore, a point can be represented as a pair of numbers: the $x$
coordinate and the $y$ coordinate.  Accordingly, specify a constructor
src_scheme[:exports code]{make-point} and selectors src_scheme[:exports
code]{x-point} and src_scheme[:exports code]{y-point} that define this
representation.  Finally, using your selectors and constructors, define a
procedure src_scheme[:exports code]{midpoint-segment} that takes a line segment
as argument and returns its midpoint (the point whose coordinates are the
average of the coordinates of the endpoints).  To try your procedures, you'll
need a way to print points:

#+ATTR_LATEX: :options morekeywords={define,lambda,if}
#+BEGIN_SRC scheme
  (define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))
#+END_SRC




* Solution
:PROPERTIES:
:CUSTOM_ID: solution
:END:

** Definition of =point=-related functions
:PROPERTIES:
:CUSTOM_ID: point-functions
:END:

In this section we define an interface for a 2-dimensional point.  The
constructor for the point is called src_scheme[:exports code]{make-point}, and
the point is equipped with selectors src_scheme[:exports code]{x-point} and
src_scheme[:exports code]{y-point} for the \(x\)-coordinate and \(y\)-coordinate
of the point, respectively.  We also define the function src_scheme[:exports
code]{midpoint-points} that finds the midpoint of two points.  Although this
function is not strictly necessary to satisfy the exercise, we will later use it
to define a segment input.

#+ATTR_LATEX: :options morekeywords={define,lambda,if},deletekeywords={abs,gcd}
#+BEGIN_SRC scheme
  ;; constructor for a 2-dimensional point.  Takes values `x` and `y` as inputs.
  (define (make-point x y)
    (cons x y))

  ;; extract the x-axis coordinate from `point`
  (define (x-point point)
    (car point))

  ;; extract the y-axis coordinate from `point`
  (define (y-point point)
    (cdr point))

  ;; return a point data structure with values given by the midpoint of the points
  ;; `p1` and `p2`
  (define (midpoint-points p1 p2)
    (define (average a b)
      (/ (+ a b) 2.0))
    (make-point (average (x-point p1)
			 (x-point p2))
		(average (y-point p1)
			 (y-point p2))))
#+END_SRC




** Definition of =segment=-related functions
:PROPERTIES:
:CUSTOM_ID: segment-functions
:END:

In this section we define an interface for a 2-dimensional line segment, which
is defined by a starting point and an ending point.  The constructor for the
line segment is called src_scheme[:exports code]{make-segment}, and is equipped
with selectors src_scheme[:exports code]{start-segment} and src_scheme[:exports
code]{end-segment}.  The data strucutre is also equipped with a
src_scheme[:exports code]{midpoint-segment} function for calculating the
midpoint of the line segment, and a src_scheme[:exports code]{print-segment}
function for printing a representation of the segment to the console.

#+ATTR_LATEX: :options morekeywords={define,lambda,if},deletekeywords={abs,gcd}
#+BEGIN_SRC scheme
  ;; constructor for a segment.  Takes two points `start-segment` and
  ;; `end-segment` as inputs.
  (define (make-segment start-segment end-segment)
    (cons start-segment end-segment))

  ;; extract the starting point from segment `segment`
  (define (start-segment segment)
    (car segment))

  ;; extract the ending point from segment `segment`
  (define (end-segment segment)
    (cdr segment))

  ;; return a point data structure with values given by the midpoint of `segment`
  (define (midpoint-segment segment)
    (midpoint-points (start-segment segment)
		     (end-segment segment)))

  ;; write a printed representation of the segment to the console
  (define (print-segment segment)
    (display "starting:")
    (print-point (start-segment segment))
    (newline)
    (display "ending:")
    (print-point (end-segment segment)))
#+END_SRC




** Test cases
:PROPERTIES:
:CUSTOM_ID: example-usage
:END:

The following are some examples of creating points, line segments, and
calculating the midpoint of points and line segments.

#+ATTR_LATEX: :options morekeywords={define,lambda,if},deletekeywords={abs,gcd}
#+BEGIN_SRC scheme
  ;; create a few points
  (define p-0-0 (make-point 0 0))
  (define p-2-6 (make-point 2 6))
  (define p-8-4 (make-point 8 4))

  ;; create a few segments
  (define p-0-0.p-2-6 (make-segment p-0-0 p-2-6))
  (define p-2-6.p-8-4 (make-segment p-2-6 p-8-4))

  ;; print the points
  (print-point p-0-0)
  (print-point p-2-6)
  (print-point p-8-4)

  ;; using selectors for points
  (x-point p-2-6)
  (y-point p-2-6)

  ;; print the segments
  (print-segment p-0-0.p-2-6)
  (print-segment p-2-6.p-8-4)

  ;; using selectors for segments
  (print-point (start-segment p-2-6.p-8-4))
  (print-point (end-segment p-2-6.p-8-4))

  ;; print the midpoint of the points
  (print-point (midpoint-points p-0-0 p-2-6))  ;; (1.,3.)
  (print-point (midpoint-points p-2-6 p-8-4))  ;; (5.,5.)

  ;; print segment midpoints (this is equivalent to the previous commands using
  ;; `midpoint-points`)
  (print-point (midpoint-segment p-0-0.p-2-6))  ;; (1.,3.)
  (print-point (midpoint-segment p-2-6.p-8-4))  ;; (5.,5.)
#+END_SRC
