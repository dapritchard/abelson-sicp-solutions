#+TITLE: SICP Exercise 1.42
#+SETUPFILE: ../export-setup/main-settings.org
#+PROPERTY: header-args :tangle chap01exer42.scm


* Exercise 1.42
:PROPERTIES:
:CUSTOM_ID: exercise
:END:

Let $f$ and $g$ be two one-argument functions.  The composition $f$ after $g$ is
defined to be the function $x \mapsto f(g(x))$.  Define a procedure
src_scheme[:exports code]{compose} that implements composition.  For example, if
src_scheme[:exports code]{inc} is a procedure that adds 1 to its argument, then
the result of evaluating src_scheme[:exports code]{((compose square inc) 6)}
is 49.




* Solution
:PROPERTIES:
:CUSTOM_ID: solution
:END:

** Definition of =compose=
:PROPERTIES:
:CUSTOM_ID: compose-definition
:END:

Create the src_scheme[:exports code]{compose} function.
#+ATTR_LATEX: :options morekeywords={define,lambda}
#+BEGIN_SRC scheme
  ;; takes input functions `f` and `g` and returns a function that takes an input
  ;; `x` and performs the composition `f(g(x))`
  (define (compose f g)
      (lambda (x)
	(f (g x))))
#+END_SRC




** Example usage
:PROPERTIES:
:CUSTOM_ID: example-usage
:END:

A few example uses of src_scheme[:exports code]{compose}.
#+BEGIN_SRC scheme
  ;; evaluates to a value of 49
  ((compose square 1+) 6)

  ;; evaluates to a value of 37
  ((compose 1+ square) 6)
#+END_SRC
