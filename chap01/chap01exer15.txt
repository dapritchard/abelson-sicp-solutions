*Exercise 1.15:* The sine of an angle (specified in radians) can
be computed by making use of the approximation `sin x approx x'
if x is sufficiently small, and the trigonometric identity

                    x             x
     sin x = 3 sin --- - 4 sin^3 ---
                    3             3

to reduce the size of the argument of sin.  (For purposes of this
exercise an angle is considered "sufficiently small" if its
magnitude is not greater than 0.1 radians.) These ideas are
incorporated in the following procedures:

     (define (cube x) (* x x x))

     (define (p x) (- (* 3 x) (* 4 (cube x))))

     (define (sine angle)
        (if (not (> (abs angle) 0.1))
            angle
            (p (sine (/ angle 3.0)))))

  a. How many times is the procedure `p' applied when `(sine
     12.15)' is evaluated?

  b. What is the order of growth in space and number of steps (as
     a function of a) used by the process generated by the `sine'
     procedure when `(sine a)' is evaluated?

-----------------------------------------------------------------




a.
----------

The expression (sine 12.15) is expanded by the interpreter as follows.

    (sine 12.15)

    (p (sine 4.05))

    (p (p (sine 1.35)))

    (p (p (p (sine 0.45))))

    (p (p (p (p (sine 0.15)))))

    (p (p (p (p (p (sine 0.05))))))

    (p (p (p (p (p 0.05)))))

So we see that `p` is evaluated 5 times.




b.
----------

The number of times that we have to evaluate `p` for a given angle `x` is given
by the smallest integer `n` such that `0.1 * 3^n >= abs(x)`.  Rewriting this
expression gives us `n = ceiling( log_3(10 * abs(x)) )`, so we conclude that the
procedure has logarithmic complexity.

The amount of space on the stack that is required by the interpreter is constant
for each call to `p`, so it follows that the memory requirements also have
logarithmic complexity.
